sudo: required
dist: xenial
# services:
#   - docker

# This moves Kubernetes specific config files.
env:
  global:
    - HELM_VERSION="v2.9.1"
    - K8S_VERSION="v1.10.0"
    - MINI_KUBE_VERSION="v0.28.0" # k8s 1.9.* compatibile
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_WANTUPDATENOTIFICATION=false
  matrix:
    - CHANGE_MINIKUBE_NONE_USER=true

before_script:
#- sudo apt-get update && sudo apt-get install -y git build-essential libncurses5-dev libslang2-dev gettext zlib1g-dev libselinux1-dev debhelper lsb-release pkg-config po-debconf autoconf automake autopoint libtool bison
#- git clone git://git.kernel.org/pub/scm/utils/util-linux/util-linux.git util-linux
#- cd util-linux/ && ./autogen.sh && ./configure --without-python --disable-all-programs --enable-nsenter && make
#- sudo mv nsenter /usr/local/bin/nsenter
#- cd
# Download kubectl, which is a requirement for using minikube.
- curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
# Download minikube.
- curl -Lo minikube https://storage.googleapis.com/minikube/releases/${MINI_KUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
- curl -Lo helm.tgz https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz
- ls -la
- tar -zxvf helm.tgz 
- ls -la
- sudo mv linux-amd64/helm /usr/local/bin/
- sudo minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=${K8S_VERSION} --extra-config=apiserver.Authorization.Mode=RBAC
# Fix the kubectl context, as it's often stale.
# - minikube update-context
# Wait for Kubernetes to be up and ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
# Add nsenter lib
- sudo docker run -v /usr/local/bin/:/hostbin jpetazzo/nsenter cp /nsenter /hostbin/nsenter

script:
- kubectl cluster-info
# Verify kube-addon-manager.
# kube-addon-manager is responsible for managing other kubernetes components, such as kube-dns, dashboard, storage-provisioner..
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lcomponent=kube-addon-manager -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-addon-manager to be available"; kubectl get pods --all-namespaces; kubectl -n kube-system describe pods -lcomponent=kube-addon-manager ; kubectl -n kube-system logs -lcomponent=kube-addon-manager ; done
# Wait for kube-dns to be ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
# Wait for helm to be read
- helm init
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lapp=helm,name=tiller -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for helm(tiller) to be available"; kubectl get pods --all-namespaces; done
- kubectl create clusterrolebinding serviceaccounts-cluster-admin --clusterrole=cluster-admin --group=system:serviceaccounts
- helm ls 
- git clone -b feature/luma https://github.com/onedata/charts.git
- cd charts/stable
- ./repository-dev.sh
- ls -la
- make cross-support-job-3p
- export CLUSTER_DOMAIN=$(JSONPATH='{.items[0].spec.containers[0].args[0]}'; kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH"  | cut -d '=' -f2  | sed 's/.$//') ; 
- helm install --debug --set global.region=${CLUSTER_DOMAIN%%.*},global.tld=${CLUSTER_DOMAIN#*.} -n test onezone
- helm ls
- kubectl get all --all-namespaces
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}:{@.reason};{end}{end}'; until kubectl get pods -lcomponent=onezone-ready-check -o jsonpath="$JSONPATH" 2>&1 | grep -q -e "Ready=True" -e "Ready=False:PodCompleted" ; do sleep 1;echo "waiting for travis-example deployment to be available"; kubectl get pods -n default; done
- kubectl logs -lchart=onezone
# Create example Redis deployment on Kubernetes.
#- kubectl run travis-example --image=redis --labels="app=travis-example"
# Make sure created pod is scheduled and running.
#- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n default get pods -lapp=travis-example -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for travis-example deployment to be available"; kubectl get pods -n default; done
